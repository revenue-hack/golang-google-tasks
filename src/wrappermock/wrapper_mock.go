// Code generated by MockGen. DO NOT EDIT.
// Source: wrapper.go

// Package mock_src is a generated GoMock package.
package wrappermock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/api/tasks/v1"
)

// MockTODOOpWrapper is a mock of TODOOpWrapper interface
type MockTODOOpWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockTODOOpWrapperMockRecorder
}

// MockTODOOpWrapperMockRecorder is the mock recorder for MockTODOOpWrapper
type MockTODOOpWrapperMockRecorder struct {
	mock *MockTODOOpWrapper
}

// NewMockTODOOpWrapper creates a new mock instance
func NewMockTODOOpWrapper(ctrl *gomock.Controller) *MockTODOOpWrapper {
	mock := &MockTODOOpWrapper{ctrl: ctrl}
	mock.recorder = &MockTODOOpWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTODOOpWrapper) EXPECT() *MockTODOOpWrapperMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockTODOOpWrapper) List(maxCount int64) *v1.TasklistsListCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", maxCount)
	ret0, _ := ret[0].(*v1.TasklistsListCall)
	return ret0
}

// List indicates an expected call of List
func (mr *MockTODOOpWrapperMockRecorder) List(maxCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTODOOpWrapper)(nil).List), maxCount)
}

// Insert mocks base method
func (m *MockTODOOpWrapper) Insert(tasklist *v1.TaskList) *v1.TasklistsInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", tasklist)
	ret0, _ := ret[0].(*v1.TasklistsInsertCall)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTODOOpWrapperMockRecorder) Insert(tasklist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTODOOpWrapper)(nil).Insert), tasklist)
}

// Update mocks base method
func (m *MockTODOOpWrapper) Update(tasklistid string, tasklist *v1.TaskList) *v1.TasklistsUpdateCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tasklistid, tasklist)
	ret0, _ := ret[0].(*v1.TasklistsUpdateCall)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTODOOpWrapperMockRecorder) Update(tasklistid, tasklist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTODOOpWrapper)(nil).Update), tasklistid, tasklist)
}

// Delete mocks base method
func (m *MockTODOOpWrapper) Delete(tasklistid string) *v1.TasklistsDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tasklistid)
	ret0, _ := ret[0].(*v1.TasklistsDeleteCall)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTODOOpWrapperMockRecorder) Delete(tasklistid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTODOOpWrapper)(nil).Delete), tasklistid)
}

// MockTaskOpWrapper is a mock of TaskOpWrapper interface
type MockTaskOpWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockTaskOpWrapperMockRecorder
}

// MockTaskOpWrapperMockRecorder is the mock recorder for MockTaskOpWrapper
type MockTaskOpWrapperMockRecorder struct {
	mock *MockTaskOpWrapper
}

// NewMockTaskOpWrapper creates a new mock instance
func NewMockTaskOpWrapper(ctrl *gomock.Controller) *MockTaskOpWrapper {
	mock := &MockTaskOpWrapper{ctrl: ctrl}
	mock.recorder = &MockTaskOpWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskOpWrapper) EXPECT() *MockTaskOpWrapperMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockTaskOpWrapper) List(tasklistid string) *v1.TasksListCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tasklistid)
	ret0, _ := ret[0].(*v1.TasksListCall)
	return ret0
}

// List indicates an expected call of List
func (mr *MockTaskOpWrapperMockRecorder) List(tasklistid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTaskOpWrapper)(nil).List), tasklistid)
}

// Insert mocks base method
func (m *MockTaskOpWrapper) Insert(tasklistid string, task *v1.Task) *v1.TasksInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", tasklistid, task)
	ret0, _ := ret[0].(*v1.TasksInsertCall)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTaskOpWrapperMockRecorder) Insert(tasklistid, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTaskOpWrapper)(nil).Insert), tasklistid, task)
}

// Update mocks base method
func (m *MockTaskOpWrapper) Update(tasklistid, taskid string, task *v1.Task) *v1.TasksUpdateCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tasklistid, taskid, task)
	ret0, _ := ret[0].(*v1.TasksUpdateCall)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTaskOpWrapperMockRecorder) Update(tasklistid, taskid, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskOpWrapper)(nil).Update), tasklistid, taskid, task)
}

// Delete mocks base method
func (m *MockTaskOpWrapper) Delete(tasklistid, taskid string) *v1.TasksDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tasklistid, taskid)
	ret0, _ := ret[0].(*v1.TasksDeleteCall)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTaskOpWrapperMockRecorder) Delete(tasklistid, taskid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskOpWrapper)(nil).Delete), tasklistid, taskid)
}
